"use strict";(self.webpackChunkbabylon_bulletphysics=self.webpackChunkbabylon_bulletphysics||[]).push([[8641],{7168:(e,t,n)=>{n.d(t,{o6:()=>c,vC:()=>h});class r{_wasmInstance;_ptr;_bodyReference;_referenceCount;constructor(e,t,n){this._wasmInstance=e,this._ptr=t,this._bodyReference=n,Array.isArray(n)?(n[0].addReference(),n[1].addReference()):n.addReference(),this._referenceCount=0}dispose(){if(this._referenceCount>0)throw new Error("Cannot dispose constraint while it still has references");0!==this._ptr&&(this._wasmInstance.deref()?.destroyConstraint(this._ptr),this._ptr=0,Array.isArray(this._bodyReference)?(this._bodyReference[0].removeReference(),this._bodyReference[1].removeReference()):this._bodyReference.removeReference(),this._bodyReference=null)}get ptr(){return this._ptr}addReference(){this._referenceCount+=1}removeReference(){this._referenceCount-=1}get hasReferences(){return 0<this._referenceCount}}function i(e){e.dispose()}const s=new WeakMap;class a{runtime;_inner;_worldReference;constructor(e,t,n){if(Array.isArray(n)){if(n[0].runtime!==e||n[1].runtime!==e)throw new Error("Cannot create constraint between bodies from different runtimes")}else if(n.runtime!==e)throw new Error("Cannot create constraint between body and bundle from different runtimes");this.runtime=e,this._inner=new r(new WeakRef(e.wasmInstance),t,n),this._worldReference=null;let a=s.get(e.wasmInstance);void 0===a&&(a=new FinalizationRegistry(i),s.set(e.wasmInstance,a)),a.register(this,this._inner,this)}dispose(){if(0===this._inner.ptr)return;this._inner.dispose();const e=s.get(this.runtime.wasmInstance);e?.unregister(this)}get ptr(){return this._inner.ptr}addReference(){this._inner.addReference()}removeReference(){this._inner.removeReference()}setWorldReference(e){if(null!==this._worldReference&&null!==e)throw new Error("Cannot add constraint to multiple worlds");this._worldReference!==e&&(this._worldReference=e,null!==e?this._inner.addReference():this._inner.removeReference())}}const o=64;class c extends a{constructor(e,t,n,r,i,s){const a=e.wasmInstance,c=a.allocateBuffer(o),h=a.createTypedArray(Float32Array,c,16);r.copyToArray(h.array);const l=a.allocateBuffer(o),f=a.createTypedArray(Float32Array,l,16);i.copyToArray(f.array);const u=Array.isArray(n),w=u?a.createGeneric6DofConstraintFromBundle(t.ptr,n[0],n[1],c,l,s):a.createGeneric6DofConstraint(t.ptr,n.ptr,c,l,s);a.deallocateBuffer(c,o),a.deallocateBuffer(l,o),super(e,w,u?t:[t,n])}setLinearLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setLinearUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearUpperLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularUpperLimit(this._inner.ptr,e.x,e.y,e.z)}}class h extends a{constructor(e,t,n,r,i,s){const a=e.wasmInstance,c=a.allocateBuffer(o),h=a.createTypedArray(Float32Array,c,16);r.copyToArray(h.array);const l=a.allocateBuffer(o),f=a.createTypedArray(Float32Array,l,16);i.copyToArray(f.array);const u=Array.isArray(n),w=u?a.createGeneric6DofSpringConstraintFromBundle(t.ptr,n[0],n[1],c,l,s):a.createGeneric6DofSpringConstraint(t.ptr,n.ptr,c,l,s);a.deallocateBuffer(c,o),a.deallocateBuffer(l,o),super(e,w,u?t:[t,n])}setLinearLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setLinearUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearUpperLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularUpperLimit(this._inner.ptr,e.x,e.y,e.z)}enableSpring(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintEnableSpring(this._inner.ptr,e,t)}setStiffness(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetStiffness(this._inner.ptr,e,t)}setDamping(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetDamping(this._inner.ptr,e,t)}}},8641:(e,t,n)=>{n.r(t),n.d(t,{SceneBuilder:()=>A}),n(203),n(1503),n(8227);var r=n(7456),i=n(5581),s=n(1513),a=n(9711),o=n(6041),c=n(9923),h=n(9899),l=n(8144),f=n(554),u=n(6738),w=n(7168),m=n(5203),d=n(9009),p=n(7002),y=n(6405),_=n(1592),R=n(7648),L=n(5901),g=n(3477);class A{async build(e,t){const n=new f.Z(t);n.clearColor=new o.ov(.95,.95,.95,1);const A=new r.Lq("arcRotateCamera",0,0,500,new c.Pq(0,0,0),n);A.minZ=1,A.maxZ=1e3,A.setPosition(new c.Pq(60,40,-50)),A.attachControl(void 0,!1),A.inertia=.8,A.speed=10;const S=new s.g("hemisphericLight",new c.Pq(0,1,0),n);S.intensity=.5,S.specular=new o.v9(0,0,0),S.groundColor=new o.v9(1,1,1);const b=new i.Z("directionalLight",new c.Pq(.5,-1,1),n);b.intensity=.5;b.shadowMaxZ=60,b.shadowMinZ=-60,b.autoCalcShadowZBounds=!1,b.autoUpdateExtends=!1,b.shadowOrthoScale=0,b.orthoTop=60,b.orthoBottom=-60,b.orthoLeft=-60,b.orthoRight=60;const C=new a.o(2048,b,!0);C.transparencyShadow=!0,C.usePercentageCloserFiltering=!0,C.forceBackFacesOnly=!1,C.bias=.004,C.filteringQuality=a.o.QUALITY_MEDIUM;const I=await(0,u.e)(new p.t,1),T=new m.w(I);T.register(n),T.evaluationType=d.q.Buffered;const B=new c.uq;{const e=(0,l.x)("ground",{size:120},n);e.rotationQuaternion=c.PT.RotationAxis(new c.Pq(1,0,0),Math.PI/2),C.addShadowCaster(e),e.receiveShadows=!0;const t=new y.Ty(T,new c.Pq(0,0,-1),0),r=new L.t(I);r.shape=t,c.uq.FromQuaternionToRef(e.rotationQuaternion,B),r.setInitialTransform(B),r.motionType=1;const i=new _.U(T,r);T.addRigidBody(i)}const k=1024,v=(0,h.an)("box",{size:2},n);C.addShadowCaster(v),v.receiveShadows=!0;const x=new Float32Array(16384);v.thinInstanceSetBuffer("matrix",x,16,!1);const q=new y.SA(T,new c.Pq(1,1,1)),P=new g.x(I,k);for(let e=0;e<k;++e){P.setShape(e,q);const t=c.uq.TranslationToRef(0,1+2*e,0,B);P.setInitialTransform(e,t),P.setFriction(e,1),P.setLinearDamping(e,.3),P.setAngularDamping(e,.3)}const U=new R.Y(T,P);T.addRigidBodyBundle(U);for(let e=0;e<k;e+=2){const t=[e,e+1],n=new w.vC(T,U,t,c.uq.Translation(0,-1.2,0),c.uq.Translation(0,1.2,0),!0);n.setLinearLowerLimit(new c.Pq(0,0,0)),n.setLinearUpperLimit(new c.Pq(0,0,0)),n.setAngularLowerLimit(new c.Pq(Math.PI/4,0,0)),n.setAngularUpperLimit(new c.Pq(0,0,0));for(let e=0;e<6;++e)n.enableSpring(e,!0),n.setStiffness(e,100),n.setDamping(e,1);T.addConstraint(n,!1)}return T.onTickObservable.add((()=>{U.getTransformMatricesToArray(x),v.thinInstanceBufferUpdated("matrix")})),n}}}}]);
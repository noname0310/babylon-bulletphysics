"use strict";(self.webpackChunkbabylon_bulletphysics=self.webpackChunkbabylon_bulletphysics||[]).push([[394],{394:(e,t,n)=>{n.r(t),n.d(t,{SceneBuilder:()=>B}),n(203),n(1503),n(8227),n(3108);var o=n(7456),r=n(5581),i=n(1513),s=n(9711),a=n(6041),l=n(9923),d=n(8144),p=n(3490),m=n(8014),h=n(825),c=n(554),w=n(6738),g=n(7002),u=n(1137),f=n(9848),M=n(5431),T=n(3948),E=n(1592);class y extends E.U{}var D=n(7648);class I extends D.Y{info;constructor(e,t){super(e,t),this.info=t}setDamping(e,t,n){super.setDamping(e,t,n),this.info.setLinearDamping(e,t),this.info.setAngularDamping(e,n)}setMassProps(e,t,n){super.setMassProps(e,t,n),this.info.setMass(e,t),this.info.setLocalInertia(e,n)}get length(){return this.count}}var A=n(5901);class _ extends A.t{worldId;constructor(e){super(e),this.worldId=0}}var b=n(3477);class x extends b.x{worldId;constructor(e,t){super(e,t),this.worldId=0}get length(){return this.count}}var C=n(6405);const L=new l.Pq;class v extends C.SA{localTransform;collisionGroup=1;collisionMask=65535;_material=null;constructor(e,t,n,o){super(e,o?.scaleToRef(.5,L)??L.setAll(.5)),this.localTransform=function(e,t,n){return!1===e?.equalsToFloats(0,0,0)||!1===t?.equalsToFloats(0,0,0,1)?(void 0!==t?(void 0===n&&(n=new l.uq),n=l.uq.FromQuaternionToRef(t,n),void 0!==e&&n.setTranslation(e)):void 0!==e?(void 0===n?n=l.uq.Identity():l.uq.IdentityToRef(n),n.setTranslation(e)):void 0===n?n=l.uq.Identity():l.uq.IdentityToRef(n),n):null}(t,n)}setMaterial(e,t){this._material={friction:e,restitution:t}}get material(){return this._material}}class P{worldId;constructor(){this.worldId=0}}class S{world;name="BulletPlugin";onCollisionObservable=new f.cP;onCollisionEndedObservable=new f.cP;onTriggerCollisionObservable=new f.cP;_initializedBodies=[];_unInitializedBodies=[];commandContext=new P;constructor(e){this.world=new T.h(e)}setGravity(e){this.world.setGravity(e)}setTimeStep(e){this.world.timeStep=e}getTimeStep(){return this.world.timeStep}executeStep(e,t){{const e=this._unInitializedBodies;for(let t=0;t<e.length;++t){const n=e[t],o=n._pluginData;if(o){if(!(o instanceof _))throw new Error("Invalid body type.");{const r=new y(this.world,o);this.world.addRigidBody(r,o.worldId),this._initializedBodies.push(e[t]),n._pluginData=r}}const r=n._pluginDataInstances;if(r){if(!(r instanceof x))throw new Error("Invalid body type.");{const o=new I(this.world,r);this.world.addRigidBodyBundle(o,r.worldId),this._initializedBodies.push(e[t]),n._pluginDataInstances=o}}}e.length=0}for(let e=0;e<t.length;++e){const n=t[e];n.disablePreStep||this.setPhysicsBodyTransformation(n,n.transformNode)}this.world.afterAnimations(e);for(let e=0;e<t.length;++e){const n=t[e];n.disableSync||this.sync(n)}}setPhysicsBodyTransformation(e,t){if(e.getPrestepType()===p.f9.TELEPORT){const n=e.transformNode,o=e._pluginData;o&&(o instanceof y?o.setTransformMatrix(this._getTransformInfos(t,S._TempMatrix)):o instanceof _&&o.setInitialTransform(this._getTransformInfos(t,S._TempMatrix)));const r=e._pluginDataInstances;if(r){const e=n._thinInstanceDataStorage.matrixData;if(!e)return;if(r instanceof I)r.setTransformMatricesFromArray(e);else if(r instanceof x)for(let t=0;t<r.count;++t){const n=l.uq.FromArrayToRef(e,16*t,S._TempMatrix);r.setInitialTransform(t,n)}}}else e.getPrestepType()===p.f9.ACTION?this.setTargetTransform(e,t.absolutePosition,t.absoluteRotationQuaternion):e.getPrestepType()===p.f9.DISABLED?u.V.Warn("Prestep type is set to DISABLED. Unable to set physics body transformation."):u.V.Warn("Invalid prestep type set to physics body.")}getPluginVersion(){return 2}setVelocityLimits(e,t){throw new Error("Method not implemented.")}getMaxLinearVelocity(){throw new Error("Method not implemented.")}getMaxAngularVelocity(){throw new Error("Method not implemented.")}static _MotionTypeToBullet(e){switch(e){case p.AH.DYNAMIC:return 0;case p.AH.STATIC:return 1;case p.AH.ANIMATED:return 2;default:throw new Error("Invalid motion type")}}static _TempMatrix=new l.uq;initBody(e,t,n,o){const r=e._pluginData=new _(this.world.wasmInstance);r.motionType=S._MotionTypeToBullet(t);const i=l.uq.FromQuaternionToRef(o,S._TempMatrix);i.setTranslation(n),r.setInitialTransform(i),this._unInitializedBodies.push(e)}initBodyInstances(e,t,n){const o=n._thinInstanceDataStorage?.instancesCount??0,r=n._thinInstanceDataStorage.matrixData;if(!r)return;const i=new x(this.world.wasmInstance,o);e._pluginDataInstances=i;const s=S._MotionTypeToBullet(t);for(let e=0;e<o;++e){i.setMotionType(e,s);const t=l.uq.FromArrayToRef(r,16*e,S._TempMatrix);i.setInitialTransform(e,t)}this._unInitializedBodies.push(e)}updateBodyInstances(e,t){const n=t._thinInstanceDataStorage?.instancesCount??0,o=t._thinInstanceDataStorage.matrixData;if(!o)return;const r=e._pluginDataInstances,i=r.length,s=S._MotionTypeToBullet(this.getMotionType(e));if(n!==i&&r instanceof I){this.world.removeRigidBodyBundle(r,r.info.worldId);const e=r.info,t=new x(this.world.wasmInstance,n);{const o=Math.min(n,i);for(let n=0;n<o;++n)t.setShape(n,e.getShape(n)),t.setInitialTransform(n,r.getTransformMatrixToRef(n,S._TempMatrix)),t.setMotionType(n,e.getMotionType(n)),t.setMass(n,e.getMass(n)),t.setLocalInertia(n,e.getLocalInertiaToRef(n,l.AA.Vector3[0])),t.setLinearDamping(n,e.getLinearDamping(n)),t.setAngularDamping(n,e.getAngularDamping(n)),t.setFriction(n,e.getFriction(n)),t.setRestitution(n,e.getRestitution(n)),t.setLinearSleepingThreshold(n,e.getLinearSleepingThreshold(n)),t.setAngularSleepingThreshold(n,e.getAngularSleepingThreshold(n)),t.setCollisionGroup(n,e.getCollisionGroup(n)),t.setCollisionMask(n,e.getCollisionMask(n)),t.setAdditionalDamping(n,e.getAdditionalDamping(n)),t.setNoContactResponse(n,e.getNoContactResponse(n)),t.setDisableDeactivation(n,e.getDisableDeactivation(n))}for(let e=i;e<n;++e)t.setInitialTransform(e,l.uq.FromArrayToRef(o,16*e,S._TempMatrix)),t.setMotionType(e,s);const a=new I(this.world,t);this.world.addRigidBodyBundle(a,t.worldId)}}removeBody(e){throw new Error("Method not implemented.")}sync(e){throw new Error("Method not implemented.")}syncTransform(e,t){throw new Error("Method not implemented.")}setShape(e,t){throw new Error("Method not implemented.")}getShape(e){throw new Error("Method not implemented.")}getShapeType(e){throw new Error("Method not implemented.")}setEventMask(e,t,n){throw new Error("Method not implemented.")}getEventMask(e,t){throw new Error("Method not implemented.")}setMotionType(e,t,n){throw new Error("Method not implemented.")}getMotionType(e,t){throw new Error("Method not implemented.")}computeMassProperties(e,t){throw new Error("Method not implemented.")}setMassProperties(e,t,n){void 0!==t.inertiaOrientation&&u.V.Warn("Inertia orientation is not supported in bullet."),void 0!==t.centerOfMass&&u.V.Warn("Center of mass is not supported in bullet.");const o=e._pluginData;if(o)if(o instanceof _)void 0!==t.mass&&(o.mass=t.mass),void 0!==t.inertia&&(o.localInertia=t.inertia);else if(o instanceof y){const e=t.mass??o.getMass(),n=t.inertia??o.getLocalInertia();o.setMassProps(e,n)}if(e._pluginDataInstances){const e=n??0,r=void 0!==n?n+1:o.count;if(o instanceof x)for(let n=e;n<r;++n)void 0!==t.mass&&o.setMass(n,t.mass),void 0!==t.inertia&&o.setLocalInertia(n,t.inertia);else if(o instanceof I)for(let n=e;n<r;++n)o.setMassProps(n,t.mass??o.getMass(n),t.inertia??o.getLocalInertia(n))}}getMassProperties(e,t){throw new Error("Method not implemented.")}setLinearDamping(e,t,n){const o=e._pluginData;o&&(o instanceof _?o.linearDamping=t:o instanceof y&&o.setDamping(t,o.getAngularDamping()));const r=e._pluginDataInstances;if(r){const e=n??0,o=void 0!==n?n+1:r.length;if(r instanceof x)for(let n=e;n<o;++n)r.setLinearDamping(n,t);else if(r instanceof I)for(let n=e;n<o;++n)r.setDamping(n,t,r.getAngularDamping(n))}}getLinearDamping(e,t){const n=e._pluginData;if(n){if(n instanceof _)return n.linearDamping;if(n instanceof y)return n.getLinearDamping()}const o=e._pluginDataInstances;if(o){const e=t??0;if(o instanceof x)return o.getLinearDamping(e);if(o instanceof I)return o.getLinearDamping(e)}throw new Error("Invalid body type.")}setAngularDamping(e,t,n){const o=e._pluginData;o&&(o instanceof _?o.angularDamping=t:o instanceof y&&o.setDamping(o.getLinearDamping(),t));const r=e._pluginDataInstances;if(r){const e=n??0,o=void 0!==n?n+1:r.length;if(r instanceof x)for(let n=e;n<o;++n)r.setAngularDamping(n,t);else if(r instanceof I)for(let n=e;n<o;++n)r.setDamping(n,r.getLinearDamping(n),t)}}getAngularDamping(e,t){const n=e._pluginData;if(n){if(n instanceof _)return n.angularDamping;if(n instanceof y)return n.getAngularDamping()}const o=e._pluginDataInstances;if(o){const e=t??0;if(o instanceof x)return o.getAngularDamping(e);if(o instanceof I)return o.getAngularDamping(e)}throw new Error("Invalid body type.")}setLinearVelocity(e,t,n){throw new Error("Method not implemented.")}getLinearVelocityToRef(e,t,n){throw new Error("Method not implemented.")}applyImpulse(e,t,n,o){throw new Error("Method not implemented.")}applyAngularImpulse(e,t,n){throw new Error("Method not implemented.")}applyForce(e,t,n,o){throw new Error("Method not implemented.")}setAngularVelocity(e,t,n){throw new Error("Method not implemented.")}getAngularVelocityToRef(e,t,n){throw new Error("Method not implemented.")}getBodyGeometry(e){throw new Error("Method not implemented.")}disposeBody(e){throw new Error("Method not implemented.")}setCollisionCallbackEnabled(e,t,n){throw new Error("Method not implemented.")}setCollisionEndedCallbackEnabled(e,t,n){throw new Error("Method not implemented.")}addConstraint(e,t,n,o,r){throw new Error("Method not implemented.")}getCollisionObservable(e,t){throw new Error("Method not implemented.")}getCollisionEndedObservable(e,t){throw new Error("Method not implemented.")}setGravityFactor(e,t,n){throw new Error("Method not implemented.")}getGravityFactor(e,t){throw new Error("Method not implemented.")}setTargetTransform(e,t,n,o){const r=l.uq.FromQuaternionToRef(n,S._TempMatrix);r.setTranslation(t);const i=e._pluginData;i&&(i instanceof _?i.setInitialTransform(r):i instanceof y&&i.setDynamicTransformMatrix(r,!0));const s=e._pluginDataInstances;if(s){const e=o??0,t=void 0!==o?o+1:s.length;if(s instanceof x)for(let n=e;n<t;++n)s.setInitialTransform(n,r);else if(s instanceof I)for(let n=e;n<t;++n)s.setDynamicTransformMatrix(n,r,!0)}}initShape(e,t,n){switch(t){case p.DK.SPHERE:throw new Error("Sphere shape not supported.");case p.DK.BOX:e._pluginData=new v(this.world,n.center,n.rotation,n.extents);break;case p.DK.CAPSULE:throw new Error("Capsule shape not supported.");case p.DK.CONTAINER:throw new Error("Container shape not supported.");case p.DK.CYLINDER:throw new Error("Cylinder shape not supported.");case p.DK.CONVEX_HULL:case p.DK.MESH:throw new Error("Convex hull and mesh shapes not supported.");case p.DK.HEIGHTFIELD:throw new Error("Heightfield shape not supported.");default:throw new Error("Unsupported Shape Type.")}}setShapeFilterMembershipMask(e,t){e._pluginData.collisionGroup=t}getShapeFilterMembershipMask(e){return e._pluginData.collisionGroup}setShapeFilterCollideMask(e,t){e._pluginData.collisionMask=t}getShapeFilterCollideMask(e){return e._pluginData.collisionMask}setMaterial(e,t){const n=t.friction??.5;t.staticFriction&&u.V.Warn("Static friction is not supported in bullet.");const o=t.restitution??0;t.frictionCombine&&t.frictionCombine!==M.F.MULTIPLY&&u.V.Warn("Friction combine is fixed to MULTIPLY in bullet."),t.restitutionCombine&&t.restitutionCombine!==M.F.MULTIPLY&&u.V.Warn("Restitution combine is fixed to MULTIPLY in bullet."),e._pluginData.setMaterial(n,o)}getMaterial(e){throw new Error("Method not implemented.")}setDensity(e,t){throw new Error("Method not implemented.")}getDensity(e){throw new Error("Method not implemented.")}_getTransformInfos(e,t){if(e.parent){const n=e.computeWorldMatrix(!0);return t.copyFrom(n)}let n=l.AA.Quaternion[0];if(e.rotationQuaternion)n=e.rotationQuaternion;else{const t=e.rotation;l.PT.FromEulerAnglesToRef(t.x,t.y,t.z,n)}return l.uq.FromQuaternionToRef(n,t),t.setTranslation(e.position),t}addChild(e,t,n,o,r){throw new Error("Method not implemented.")}removeChild(e,t){throw new Error("Method not implemented.")}getNumChildren(e){throw new Error("Method not implemented.")}getBoundingBox(e){throw new Error("Method not implemented.")}getBodyBoundingBox(e){throw new Error("Method not implemented.")}disposeShape(e){throw new Error("Method not implemented.")}setTrigger(e,t){throw new Error("Method not implemented.")}initConstraint(e,t,n){throw new Error("Method not implemented.")}setEnabled(e,t){throw new Error("Method not implemented.")}getEnabled(e){throw new Error("Method not implemented.")}setCollisionsEnabled(e,t){throw new Error("Method not implemented.")}getCollisionsEnabled(e){throw new Error("Method not implemented.")}setAxisFriction(e,t,n){throw new Error("Method not implemented.")}getAxisFriction(e,t){throw new Error("Method not implemented.")}setAxisMode(e,t,n){throw new Error("Method not implemented.")}getAxisMode(e,t){throw new Error("Method not implemented.")}setAxisMinLimit(e,t,n){throw new Error("Method not implemented.")}getAxisMinLimit(e,t){throw new Error("Method not implemented.")}setAxisMaxLimit(e,t,n){throw new Error("Method not implemented.")}getAxisMaxLimit(e,t){throw new Error("Method not implemented.")}setAxisMotorType(e,t,n){throw new Error("Method not implemented.")}getAxisMotorType(e,t){throw new Error("Method not implemented.")}setAxisMotorTarget(e,t,n){throw new Error("Method not implemented.")}getAxisMotorTarget(e,t){throw new Error("Method not implemented.")}setAxisMotorMaxForce(e,t,n){throw new Error("Method not implemented.")}getAxisMotorMaxForce(e,t){throw new Error("Method not implemented.")}disposeConstraint(e){throw new Error("Method not implemented.")}getBodiesUsingConstraint(e){throw new Error("Method not implemented.")}raycast(e,t,n,o){throw new Error("Method not implemented.")}dispose(){throw new Error("Method not implemented.")}}class B{async build(e,t){const n=new c.Z(t);n.clearColor=new a.ov(.95,.95,.95,1);const u=new o.Lq("arcRotateCamera",0,0,500,new l.Pq(0,0,0),n);u.minZ=1,u.maxZ=1e3,u.setPosition(new l.Pq(60,40,-50)),u.attachControl(void 0,!1),u.inertia=.8,u.speed=10;const f=new i.g("hemisphericLight",new l.Pq(0,1,0),n);f.intensity=.5,f.specular=new a.v9(0,0,0),f.groundColor=new a.v9(1,1,1);const M=new r.Z("directionalLight",new l.Pq(.5,-1,1),n);M.intensity=.5;M.shadowMaxZ=60,M.shadowMinZ=-60,M.autoCalcShadowZBounds=!1,M.autoUpdateExtends=!1,M.shadowOrthoScale=0,M.orthoTop=60,M.orthoBottom=-60,M.orthoLeft=-60,M.orthoRight=60;const T=new s.o(2048,M,!0);T.transparencyShadow=!0,T.usePercentageCloserFiltering=!0,T.forceBackFacesOnly=!1,T.bias=.004,T.filteringQuality=s.o.QUALITY_MEDIUM;const E=await(0,w.e)(new g.t,2);n.enablePhysics(new l.Pq(0,-9.8,0),new S(E));{const e=(0,d.x)("ground",{size:120},n);e.rotationQuaternion=l.PT.RotationAxis(new l.Pq(1,0,0),Math.PI/2),T.addShadowCaster(e),e.receiveShadows=!0;const t=new h.cL(new l.Pq(0,0,-100),l.PT.Identity(),new l.Pq(1e3,1e3,200),n);t.material={friction:10,restitution:.5},t.filterCollideMask=65535,t.filterMembershipMask=1;const o=new m.a(e,p.AH.STATIC,!1,n);o.setMassProperties({mass:0}),o.setLinearDamping(.3),o.setAngularDamping(.3),o.computeMassProperties()}return n}}}}]);
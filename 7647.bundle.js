"use strict";(self.webpackChunkbabylon_bulletphysics=self.webpackChunkbabylon_bulletphysics||[]).push([[7647],{28:(e,t,n)=>{n.r(t),n.d(t,{SceneBuilder:()=>g}),n(203),n(1503),n(8227);var r=n(7456),i=n(5581),s=n(1513),a=n(9711),o=n(6041),c=n(9923),h=n(9899),l=n(8144),w=n(554),d=n(6738),u=n(7168),m=n(5203),f=n(9009),p=n(7002),y=n(6405),_=n(1592),R=n(5901);class g{async build(e,t){const n=new w.Z(t);n.clearColor=new o.ov(.95,.95,.95,1);const g=new r.Lq("arcRotateCamera",0,0,500,new c.Pq(0,0,0),n);g.minZ=1,g.maxZ=1e3,g.setPosition(new c.Pq(10,10,-5)),g.attachControl(void 0,!1),g.inertia=.8,g.speed=10;const L=new s.g("hemisphericLight",new c.Pq(0,1,0),n);L.intensity=.5,L.specular=new o.v9(0,0,0),L.groundColor=new o.v9(1,1,1);const T=new i.Z("directionalLight",new c.Pq(.5,-1,1),n);T.intensity=.5;T.shadowMaxZ=60,T.shadowMinZ=-60,T.autoCalcShadowZBounds=!1,T.autoUpdateExtends=!1,T.shadowOrthoScale=0,T.orthoTop=60,T.orthoBottom=-60,T.orthoLeft=-60,T.orthoRight=60;const A=new a.o(2048,T,!0);A.transparencyShadow=!0,A.usePercentageCloserFiltering=!0,A.forceBackFacesOnly=!1,A.bias=.004,A.filteringQuality=a.o.QUALITY_MEDIUM;const b=await(0,d.e)(new p.t,1),I=new m.w(b);I.register(n),I.evaluationType=f.q.Immediate;const C=new c.uq;{const e=(0,l.x)("ground",{size:120},n);e.rotationQuaternion=c.PT.RotationAxis(new c.Pq(1,0,0),Math.PI/2),A.addShadowCaster(e),e.receiveShadows=!0;const t=new y.Ty(I,new c.Pq(0,0,-1),0),r=new R.t(b);r.shape=t,c.uq.FromQuaternionToRef(e.rotationQuaternion,C),r.setInitialTransform(C),r.motionType=1;const i=new _.U(I,r);I.addRigidBody(i)}const S=new y.SA(I,new c.Pq(1,1,1)),x=new R.t(b);x.motionType=0,x.shape=S,x.setInitialTransform(c.uq.TranslationToRef(0,3,0,C)),x.friction=1,x.linearDamping=.3,x.angularDamping=.3,x.disableDeactivation=!0;const v=(0,h.an)("box1",{size:2},n);A.addShadowCaster(v),v.receiveShadows=!0,v.rotationQuaternion=c.PT.Identity();const P=new _.U(I,x);I.addRigidBody(P);const k=(0,h.an)("box2",{size:2},n);A.addShadowCaster(k),k.receiveShadows=!0,k.position.set(0,6,0),k.rotationQuaternion=c.PT.Identity();const q=new _.U(I,x);I.addRigidBody(q);const B=new u.o6(I,P,q,c.uq.Translation(0,1,0),c.uq.Translation(0,-1,0),!0);B.setLinearLowerLimit(new c.Pq(0,0,0)),B.setLinearUpperLimit(new c.Pq(0,0,0)),B.setAngularLowerLimit(new c.Pq(Math.PI/4,0,0)),B.setAngularUpperLimit(new c.Pq(0,0,0)),I.addConstraint(B,!0);let U=0,F=0;return I.onTickObservable.add((()=>{P.getTransformMatrixToRef(C),C.getTranslationToRef(v.position),c.PT.FromRotationMatrixToRef(C,v.rotationQuaternion),q.getTransformMatrixToRef(C),C.getTranslationToRef(k.position),c.PT.FromRotationMatrixToRef(C,k.rotationQuaternion),U+=t.getDeltaTime(),F+=1,F%3==0&&(C.setTranslationFromFloats(0,3*Math.sin(U/1e3),0),P.setTransformMatrix(C))})),window.runtime=I,window.body1=P,n}}},7168:(e,t,n)=>{n.d(t,{o6:()=>c,vC:()=>h});class r{_wasmInstance;_ptr;_bodyReference;_referenceCount;constructor(e,t,n){this._wasmInstance=e,this._ptr=t,this._bodyReference=n,Array.isArray(n)?(n[0].addReference(),n[1].addReference()):n.addReference(),this._referenceCount=0}dispose(){if(this._referenceCount>0)throw new Error("Cannot dispose constraint while it still has references");0!==this._ptr&&(this._wasmInstance.deref()?.destroyConstraint(this._ptr),this._ptr=0,Array.isArray(this._bodyReference)?(this._bodyReference[0].removeReference(),this._bodyReference[1].removeReference()):this._bodyReference.removeReference(),this._bodyReference=null)}get ptr(){return this._ptr}addReference(){this._referenceCount+=1}removeReference(){this._referenceCount-=1}get hasReferences(){return 0<this._referenceCount}}function i(e){e.dispose()}const s=new WeakMap;class a{runtime;_inner;_worldReference;constructor(e,t,n){if(Array.isArray(n)){if(n[0].runtime!==e||n[1].runtime!==e)throw new Error("Cannot create constraint between bodies from different runtimes")}else if(n.runtime!==e)throw new Error("Cannot create constraint between body and bundle from different runtimes");this.runtime=e,this._inner=new r(new WeakRef(e.wasmInstance),t,n),this._worldReference=null;let a=s.get(e.wasmInstance);void 0===a&&(a=new FinalizationRegistry(i),s.set(e.wasmInstance,a)),a.register(this,this._inner,this)}dispose(){if(0===this._inner.ptr)return;this._inner.dispose();const e=s.get(this.runtime.wasmInstance);e?.unregister(this)}get ptr(){return this._inner.ptr}addReference(){this._inner.addReference()}removeReference(){this._inner.removeReference()}setWorldReference(e){if(null!==this._worldReference&&null!==e)throw new Error("Cannot add constraint to multiple worlds");this._worldReference!==e&&(this._worldReference=e,null!==e?this._inner.addReference():this._inner.removeReference())}}const o=64;class c extends a{constructor(e,t,n,r,i,s){const a=e.wasmInstance,c=a.allocateBuffer(o),h=a.createTypedArray(Float32Array,c,16);r.copyToArray(h.array);const l=a.allocateBuffer(o),w=a.createTypedArray(Float32Array,l,16);i.copyToArray(w.array);const d=Array.isArray(n),u=d?a.createGeneric6DofConstraintFromBundle(t.ptr,n[0],n[1],c,l,s):a.createGeneric6DofConstraint(t.ptr,n.ptr,c,l,s);a.deallocateBuffer(c,o),a.deallocateBuffer(l,o),super(e,u,d?t:[t,n])}setLinearLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setLinearUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearUpperLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularUpperLimit(this._inner.ptr,e.x,e.y,e.z)}}class h extends a{constructor(e,t,n,r,i,s){const a=e.wasmInstance,c=a.allocateBuffer(o),h=a.createTypedArray(Float32Array,c,16);r.copyToArray(h.array);const l=a.allocateBuffer(o),w=a.createTypedArray(Float32Array,l,16);i.copyToArray(w.array);const d=Array.isArray(n),u=d?a.createGeneric6DofSpringConstraintFromBundle(t.ptr,n[0],n[1],c,l,s):a.createGeneric6DofSpringConstraint(t.ptr,n.ptr,c,l,s);a.deallocateBuffer(c,o),a.deallocateBuffer(l,o),super(e,u,d?t:[t,n])}setLinearLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setLinearUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetLinearUpperLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularLowerLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularLowerLimit(this._inner.ptr,e.x,e.y,e.z)}setAngularUpperLimit(e){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetAngularUpperLimit(this._inner.ptr,e.x,e.y,e.z)}enableSpring(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintEnableSpring(this._inner.ptr,e,t)}setStiffness(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetStiffness(this._inner.ptr,e,t)}setDamping(e,t){this._inner.hasReferences&&this.runtime.lock.wait(),this.runtime.wasmInstance.constraintSetDamping(this._inner.ptr,e,t)}}}}]);
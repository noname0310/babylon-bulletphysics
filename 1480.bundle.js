"use strict";(self.webpackChunkbabylon_bulletphysics=self.webpackChunkbabylon_bulletphysics||[]).push([[1480],{91480:(t,e,s)=>{s.d(e,{OptimizeIndices:()=>n});var r=s(2001);function n(t){const e=[],s=t.length/3;for(let r=0;r<s;r++)e.push([t[3*r],t[3*r+1],t[3*r+2]]);const n=new Map;e.forEach(((t,e)=>{t.forEach((t=>{let s=n.get(t);s||n.set(t,s=[]),s.push(e)}))}));const o=new r.P(s),i=[],h=t=>{const s=[t];for(;s.length>0;){const t=s.pop();o.get(t)||(o.set(t,!0),i.push(e[t]),e[t].forEach((t=>{const e=n.get(t);e&&e.forEach((t=>{o.get(t)||s.push(t)}))})))}};for(let t=0;t<s;t++)o.get(t)||h(t);let c=0;i.forEach((e=>{t[c++]=e[0],t[c++]=e[1],t[c++]=e[2]}))}},2001:(t,e,s)=>{function r(t){return Math.floor(t/8)}function n(t){return 1<<t%8}s.d(e,{P:()=>o});class o{constructor(t){this.size=t,this._byteArray=new Uint8Array(Math.ceil(this.size/8))}get(t){if(t>=this.size)throw new RangeError("Bit index out of range");const e=r(t),s=n(t);return!!(this._byteArray[e]&s)}set(t,e){if(t>=this.size)throw new RangeError("Bit index out of range");const s=r(t),o=n(t);e?this._byteArray[s]|=o:this._byteArray[s]&=~o}}}}]);